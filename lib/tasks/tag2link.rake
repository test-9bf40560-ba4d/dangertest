QUERIES = {
  # From the JOSM Source code
  # https://josm.openstreetmap.de/browser/josm/trunk/resources/data/tag2link.sophox.sparql
  "https://sophox.org/sparql" => "
    SELECT (CONCAT('Key:', ?permanent_key_ID) as ?OSM_key) ?formatter_URL WHERE {
      ?item osmdt:P2 osmd:Q7.
      ?item osmdt:P16 ?permanent_key_ID.
      ?item osmdt:P8 ?formatter_URL.
    }
  ",
  # From the JOSM Source code
  # https://josm.openstreetmap.de/browser/josm/trunk/resources/data/tag2link.wikidata.sparql
  # Edited to remove the third party formatter
  "https://query.wikidata.org/sparql" => "
    SELECT ?OSM_key ?formatter_URL WHERE {
      { ?item wdt:P1282 ?OSM_key. }
      FILTER(STRSTARTS(?OSM_key, 'Key:')) .
      { ?item wdt:P1630 ?formatter_URL. }
    }
  "
}.freeze

FILE_HEADER = "# THIS FILE IS AUTOGENERATED WITH THE script/misc/update-tag2link
# PROGRAM DO NOT MANUALLY EDIT IT

".freeze

BLACKLIST = %w[contact:fax contact:phone contact:google_plus contact:mastodon fax image phone ref:ccg twitter website wikidata wikimedia_commons].freeze

namespace :tag2link do
  task :update => :environment do
    FILE_PATH = Rails.root.join("config/tag2link.yml")

    results = QUERIES.map do |(url, query)|
      uri = URI(url)
      params = { :query => query }
      uri.query = URI.encode_www_form(params)

      req = Net::HTTP::Get.new(uri)
      req["Accept"] = "application/sparql-results+json"
      req["User-Agent"] = "OpenStreetMap Website"

      res = Net::HTTP.start(uri.hostname, uri.port, :use_ssl => uri.scheme == "https") do |http|
        http.request(req)
      end

      if res.code == "200"
        JSON.parse(res.body)["results"]["bindings"]
      else
        abort("HTTP code for #{url} is #{res.code}")
      end
    end

    filecontent = results.flatten.each_with_object({}) do |result, memo|
      tag = result["OSM_key"]["value"].slice("Key:".size..-1)
      memo[tag] = result["formatter_URL"]["value"] unless BLACKLIST.include?(tag) || memo[tag]
    end.sort.to_h.to_yaml

    File.write(FILE_PATH, FILE_HEADER + filecontent)
  end
end
